/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/functions.js":
/*!**************************!*\
  !*** ./src/functions.js ***!
  \**************************/
/***/ (() => {

eval("class Calculator{\r\n    constructor(){\r\n        this.value = 0;\r\n        this.operationsHistory = [];\r\n    }\r\n\r\n    executeCommand(command) {\r\n        this.value = command.execute(this.value);\r\n        this.operationsHistory.push(command);\r\n    }\r\n    \r\n    undo() {\r\n        const command = this.operationsHistory.pop();\r\n        this.value = command.undo(this.value);\r\n    }\r\n}\r\n\r\nclass AddCommand{\r\n    constructor(numberToAdd){\r\n        this.numberToAdd = numberToAdd;\r\n    }\r\n\r\n    execute(newResult){\r\n        return newResult + this.numberToAdd;\r\n    }\r\n\r\n    undo(newResult){\r\n        return newResult - this.numberToAdd;\r\n    }\r\n}\r\n\r\nclass SubCommand{\r\n    constructor(numberToSub){\r\n        this.numberToSub = numberToSub;\r\n    }\r\n\r\n    execute(newResult){\r\n        return newResult - this.numberToSub;\r\n    }\r\n\r\n    undo(newResult){\r\n        return newResult + this.numberToSub;\r\n    }\r\n}\r\n\r\nclass DivCommand{\r\n    constructor(numberToDiv){\r\n        this.numberToDiv = numberToDiv;\r\n    }\r\n\r\n    execute(newResult){\r\n        return newResult / this.numberToDiv;\r\n    }\r\n\r\n    undo(newResult){\r\n        return newResult * this.numberToDiv;\r\n    }\r\n}\r\n\r\nclass MultyCommand{\r\n    constructor(numberToMulty){\r\n        this.numberToMulty = numberToMulty;\r\n    }\r\n\r\n    execute(newResult){\r\n        return newResult * this.numberToMulty;\r\n    }\r\n\r\n    undo(newResult){\r\n        return newResult / this.numberToMulty;\r\n    }\r\n}\r\n\r\nclass Pow2Command{\r\n    // constructor(numberToPow){\r\n    //     this.numberToPow = numberToPow;\r\n    // }\r\n\r\n    execute(newResult){\r\n        return newResult * newResult;\r\n    }\r\n\r\n    undo(newResult){\r\n        return (newResult ** (1/2)).toFixed(3);\r\n    }\r\n}\r\n\r\nclass Pow3Command{\r\n    // constructor(numberToPow){\r\n    //     this.numberToPow = numberToPow;\r\n    // }\r\n\r\n    execute(newResult){\r\n        return newResult * newResult * newResult;\r\n    }\r\n\r\n    undo(newResult){\r\n        return (newResult ** (1/3)).toFixed(3);\r\n    }\r\n}\r\n\r\nclass PowYCommand{\r\n    constructor(numberOfPow){\r\n        this.numberOFPow = numberOfPow;\r\n    }\r\n\r\n    execute(newResult){\r\n        let x = newResult;\r\n        for (let i = 0; i < this.numberOFPow - 1; i++){\r\n            newResult *= x;\r\n        }\r\n        return newResult;\r\n    }\r\n\r\n    undo(newResult){\r\n        return (newResult ** (1/this.numberOFPow)).toFixed(3);\r\n    }\r\n}\r\n\r\nclass TenPowXCommand{\r\n    constructor(numberOfPow){\r\n        this.numberOFPow = numberOfPow;\r\n    }\r\n\r\n    execute(newResult){\r\n        newResult = 10;\r\n        for (let i = 0; i < this.numberOFPow - 1; i++){\r\n            newResult *= 10;\r\n        }\r\n        return newResult;\r\n    }\r\n\r\n    undo(newResult){\r\n        return (10 ** (1/this.numberOFPow)).toFixed(3);\r\n    }\r\n}\r\n\r\nclass ChangeSignCommand{\r\n    // constructor(numberOFPow){\r\n    //     this.numberOFPow = numberOFPow;\r\n    // }\r\n\r\n    execute(newResult){\r\n        return -newResult;\r\n    }\r\n\r\n    undo(newResult){\r\n        return -newResult;\r\n    }\r\n}\r\n\r\nclass PercentCommand{\r\n    // constructor(numberForPercent){\r\n    //     this.numberForPercent = numberForPercent;\r\n    // }\r\n\r\n    execute(newResult){\r\n        return newResult / 100;\r\n    }\r\n\r\n    undo(newResult){\r\n        return newResult * 100;\r\n    }\r\n}\r\n\r\nclass FactorialCommand{\r\n    // constructor(numberForPercent){\r\n    //     this.numberForPercent = numberForPercent;\r\n    // }\r\n\r\n    execute(newResult){\r\n        let result = 1;\r\n        for (let i = 0; i < newResult; i++){\r\n            result *= i + 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // undo(newResult){\r\n    //     return newResult / this.numberToPow;\r\n    // }\r\n}\r\n\r\nclass DivideOnXCommand{\r\n    // constructor(numberForPercent){\r\n    //     this.numberForPercent = numberForPercent;\r\n    // }\r\n\r\n    execute(newResult){\r\n        return (1 / newResult).toFixed(3);\r\n    }\r\n\r\n    undo(newResult){\r\n        return ((1 / newResult) ** (-1)).toFixed(3);\r\n    }\r\n}\r\n\r\nclass SqrtCommand{\r\n    constructor(inputNumber){\r\n        this.inputNumber = inputNumber;\r\n    }\r\n\r\n    execute(newResult){\r\n        var x = 0;\r\n        while(x*x < newResult){\r\n            x += 0.00001;\r\n        }\r\n        return x.toFixed(3);\r\n    }\r\n\r\n    undo(newResult){\r\n        return (newResult * newResult).toFixed(3);\r\n    }\r\n}\r\n\r\nclass Sqrt3Command{\r\n    constructor(inputNumber){\r\n        this.inputNumber = inputNumber;\r\n    }\r\n\r\n    execute(newResult){\r\n        if (newResult > 0){\r\n           var x = 0;\r\n            while(x*x*x < newResult){\r\n                x += 0.00001;\r\n            }\r\n            return x.toFixed(3); \r\n        } else{\r\n            while(x*x*x < newResult){\r\n                x -= 0.00001;\r\n            }\r\n            return x.toFixed(3); \r\n        } \r\n    }\r\n\r\n    undo(newResult){\r\n        return (newResult * newResult * newResult).toFixed(3);\r\n    }\r\n}\r\n\r\nclass SqrtYCommand{\r\n    constructor(inputNumber){\r\n        this.inputNumber = inputNumber;\r\n    }\r\n\r\n    execute(newResult){\r\n        return (newResult ** (1/this.inputNumber)).toFixed(3);\r\n    }\r\n\r\n    undo(newResult){\r\n        return (newResult ** (this.inputNumber)).toFixed(3);\r\n    }\r\n}\r\n\r\nlet leftOperand = '';\r\nlet rightOperand = '';\r\nlet result = null;\r\nlet lastOperation = '';\r\nlet dotCheck = false;\r\nlet memory = new Calculator();\r\nconst calc = new Calculator();\r\nconst buttons = document.querySelector(\".buttons\");\r\nbuttons.addEventListener('click', realization);\r\nconst output = document.getElementById('answer');\r\nconst input = document.getElementById('input');\r\n\r\nfunction realization(event){\r\n    if (event.target.classList.contains('theme')){\r\n        document.querySelector('.equals').classList.toggle('light'); \r\n        document.querySelector('.number').classList.toggle('light');\r\n        document.querySelector('.button').classList.toggle('light');\r\n        document.querySelector('.calcBody').classList.toggle('light');\r\n        document.querySelector('.output').classList.toggle('light');\r\n    }\r\n\r\n    if (event.target.classList.contains('number')){\r\n        if (event.target.value == '.'){\r\n            if (dotCheck == false){\r\n                dotCheck = true;\r\n                leftOperand += event.target.textContent;\r\n                output.innerHTML = leftOperand;\r\n            }\r\n        } else{\r\n            leftOperand += event.target.textContent;\r\n            output.innerHTML = leftOperand;\r\n        }\r\n    }\r\n\r\n    if (event.target.classList.contains('sign')){\r\n        if (!output.innerHTML) return;\r\n        output.innerHTML *= -1;   \r\n        leftOperand = output.innerHTML;  \r\n    }\r\n\r\n    if (event.target.classList.contains('operation')){\r\n        dotCheck = false;\r\n        if (event.target.value=='MR'){\r\n            output.innerHTML = memory.value;\r\n            leftOperand = memory.value;\r\n        } else{\r\n            if (event.target.value=='MC'){\r\n                leftOperand = '';\r\n                calc.value = 0;\r\n                if (!memory.value) return;\r\n                memory.value = 0;\r\n                output.innerHTML = '';\r\n                calc.value = 0;\r\n            } else{\r\n                if (event.target.value=='M-'){\r\n                    calc.value = 0;\r\n                    memory.executeCommand(new SubCommand(+leftOperand));\r\n                    output.innerHTML = '';\r\n                    leftOperand = ''; \r\n                } else{\r\n                    if (event.target.value=='M+'){\r\n                        calc.value = 0;\r\n                        memory.executeCommand(new AddCommand(+leftOperand));\r\n                        output.innerHTML = '';\r\n                        leftOperand = ''; \r\n                    } else{\r\n                        if (event.target.value == 'C'){\r\n                            calc.value = 0;\r\n                            calc.memory = 0;\r\n                            leftOperand = '';\r\n                            rightOperand = '';\r\n                            output.innerHTML = '';\r\n                            input.innerHTML = '';\r\n                        } else{\r\n                            if (event.target.value == '='){\r\n                                if (!rightOperand){\r\n                                    calc.executeCommand(new AddCommand(+leftOperand));\r\n                                    output.innerHTML = calc.value;\r\n                                } else{\r\n                                    calc.value = mathRealization();\r\n                                    output.innerHTML = calc.value;\r\n                                    input.innerHTML = '';\r\n                                }\r\n                            } else{\r\n                                if (!rightOperand){\r\n                                    calc.executeCommand(new AddCommand(+leftOperand));\r\n                                } else {\r\n                                    leftOperand = mathRealization(lastOperation);\r\n                                    output.innerHTML = calc.value;\r\n                                    input.innerHTML = '';\r\n                                }\r\n                                //clearOperation(event.target.value);\r\n                                if (!leftOperand) {\r\n                                leftOperand = output.innerHTML;\r\n                                output.innerHTML = '';\r\n                                } else {\r\n                                    rightOperand = leftOperand;\r\n                                    output.innerHTML = '';\r\n                                }\r\n                                leftOperand += ' ' + event.target.value;\r\n                                rightOperand = leftOperand;\r\n                                input.innerHTML = leftOperand;\r\n                                leftOperand = '';\r\n                                lastOperation = event.target.value;\r\n                                dotCheck = false;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }   \r\n}\r\n\r\nfunction mathRealization(){\r\n    switch(lastOperation){\r\n        case '+':\r\n            calc.executeCommand(new AddCommand(+leftOperand)); \r\n            break;\r\n        case '-':\r\n            calc.executeCommand(new SubCommand(+leftOperand)); \r\n            break;\r\n        case '*':\r\n            calc.executeCommand(new MultyCommand(+leftOperand)); \r\n            break;\r\n        case '/':\r\n            calc.executeCommand(new DivCommand(+leftOperand)); \r\n            break;\r\n        case '%':\r\n            calc.executeCommand(new PercentCommand(+leftOperand)); \r\n            break;            \r\n        case '^2':\r\n            calc.executeCommand(new Pow2Command(+leftOperand)); \r\n            break;\r\n        case '^3':\r\n            calc.executeCommand(new Pow3Command(+leftOperand)); \r\n            break;\r\n        case 'sqrt':\r\n            calc.executeCommand(new SqrtCommand(+leftOperand)); \r\n            break;\r\n        case 'sqrt3':\r\n            calc.executeCommand(new Sqrt3Command(+leftOperand)); \r\n            break;\r\n        case 'sqrty':\r\n            calc.executeCommand(new SqrtYCommand(+leftOperand)); \r\n            break;             \r\n        case '^y':\r\n            calc.executeCommand(new PowYCommand(+leftOperand)); \r\n            break;   \r\n        case '1/x':\r\n            calc.executeCommand(new DivideOnXCommand(+leftOperand)); \r\n            break;  \r\n        case 'x!':\r\n            calc.executeCommand(new FactorialCommand(+leftOperand)); \r\n            break;\r\n        case '10^x':\r\n            calc.executeCommand(new TenPowXCommand(+leftOperand)); \r\n            break;\r\n    }\r\n    result = calc.value;\r\n    return result;\r\n} \r\n\r\n//export {Calculator,AddCommand,SubCommand,MultyCommand,DivCommand,PercentCommand,Pow2Command,Pow3Command,PowYCommand,SqrtCommand,Sqrt3Command,SqrtYCommand,FactorialCommand,TenPowXCommand,DivideOnXCommand};\n\n//# sourceURL=webpack://calculator/./src/functions.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/functions.js"]();
/******/ 	
/******/ })()
;